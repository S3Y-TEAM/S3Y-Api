generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  
}



model Employer {
  id           Int        @id @unique(map: "id_UNIQUE") @default(autoincrement())
  Fname        String     @db.VarChar(45)
  Lname        String     @db.VarChar(45)
  Email        String     @unique(map: "Email_UNIQUE") @db.VarChar(45)
  Password     String     @db.VarChar(200)
  Phone_number String     @db.VarChar(45)
  img          String
  country      String     @db.VarChar(45)
  city         String     @db.VarChar(45)
  Address      String     @db.VarChar(60)
  user_name    String     @unique(map: "user_name_UNIQUE") @db.VarChar(45)
  Tasks        Tasks[]
  messages     messages[]
  problems     problems[]
}

model Links {
  id          Int      @unique(map: "id_UNIQUE") @default(autoincrement())
  Linkedin    String?  @db.VarChar(45)
  Github      String?  @db.VarChar(45)
  other       String?  @db.VarChar(45)
  employee_id Int
  employee    employee @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_Links_employee1")

  @@id([id, employee_id])
  @@index([employee_id], map: "fk_Links_employee1_idx")
}

model Payments {
  id           Int      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  status       Int      @default(0)
  Total_amount Int      @default(0)
  date         DateTime @db.DateTime(0)
  Tasks        Tasks[]
}

model Tasks {
  id                 Int                 @unique(map: "id_UNIQUE") @default(autoincrement())
  Title              String              @db.VarChar(45)
  Descr              String              @db.VarChar(200)
  status             String              @default("Not Started") @db.VarChar(45)
  posting_date       DateTime            @default(now()) @db.DateTime(0)
  deadline           DateTime            @db.DateTime(0)
  Address            String              @db.VarChar(45)
  price              Decimal?            @db.Decimal(10, 0)
  img                Bytes?
  note               String?             @db.VarChar(100)
  Employer_id        Int
  category_id        Int
  Payments_id        Int?
  reviews_id         Int?
  Employer           Employer            @relation(fields: [Employer_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_Tasks_Employer1")
  Payments           Payments?           @relation(fields: [Payments_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_Tasks_Payments1")
  category           category            @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_Tasks_category1")
  reviews            reviews?            @relation(fields: [reviews_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_Tasks_reviews1")
  Tasks_has_employee Tasks_has_employee?
  applicants         Application[]

  @@id([id, Employer_id, category_id])
  @@index([Employer_id], map: "fk_Tasks_Employer1_idx")
  @@index([Payments_id], map: "fk_Tasks_Payments1_idx")
  @@index([category_id], map: "fk_Tasks_category1_idx")
  @@index([reviews_id], map: "fk_Tasks_reviews1_idx")
}

model Tasks_has_employee {
  Tasks_id    Int      @unique(map: "Tasks_id_UNIQUE")
  employee_id Int      @unique(map: "employee_id_UNIQUE")
  Tasks       Tasks    @relation(fields: [Tasks_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_Tasks_has_employee_Tasks")
  employee    employee @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_Tasks_has_employee_employee1")

  @@id([Tasks_id, employee_id])
  @@index([Tasks_id], map: "fk_Tasks_has_employee_Tasks_idx")
  @@index([employee_id], map: "fk_Tasks_has_employee_employee1_idx")
}

model category {
  name                  String                @db.VarChar(45)
  id                    Int                   @id @unique(map: "id_UNIQUE") @default(autoincrement())
  parent                String?               @db.VarChar(45)
  employee_has_category EmployeeHasCategory[]
  Tasks                 Tasks[]
}

model certificates {
  id          Int      @unique(map: "id_UNIQUE") @default(autoincrement())
  path        String   @db.VarChar(200)
  employee_id Int
  employee    employee @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_certificates_employee1")

  @@id([id, employee_id])
  @@index([employee_id], map: "fk_certificates_employee1_idx")
}

model projects {
  id          Int      @unique(map: "id_UNIQUE") @default(autoincrement())
  path        String   @db.VarChar(200)
  name        String   @db.VarChar(200)
  type        String   @db.VarChar(200)
  description String   @db.VarChar(200)
  employee_id Int
  employee    employee @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_projects_employee1")

  @@id([id, employee_id])
  @@index([employee_id], map: "fk_projects_employee1_idx")
}

model employee {
  id                    Int                   @id @unique(map: "id_UNIQUE") @default(autoincrement())
  National_id           String                @unique(map: "National_id_UNIQUE") @db.VarChar(45)
  Fname                 String                @db.VarChar(45)
  Lname                 String                @db.VarChar(45)
  Email                 String                @unique(map: "Email_UNIQUE") @db.VarChar(45)
  Password              String                @db.VarChar(200)
  Phone_number          String                @db.VarChar(45)
  Personal_image        String                @db.VarChar(200)
  National_image        String                @db.VarChar(200)
  country               String                @db.VarChar(45)
  city                  String                @db.VarChar(45)
  Address               String                @db.VarChar(45)
  user_name             String                @unique(map: "user_name_UNIQUE") @db.VarChar(45)
  verified              Int
  experience            String                @db.VarChar(45)
  employee_has_category EmployeeHasCategory[]
  Links                 Links[]
  Tasks_has_employee    Tasks_has_employee?
  certificates          certificates[]
  projects              projects[]
  messages              messages[]
  problems              problems[]
  applications          Application[]
}

model EmployeeHasCategory {
  employee_id Int
  category_id Int
  category    category @relation(fields: [category_id], references: [id])
  employee    employee @relation(fields: [employee_id], references: [id])

  @@id([employee_id, category_id])
}

model messages {
  id          Int      @unique(map: "id_UNIQUE")
  text        String   @db.VarChar(1000)
  img         Bytes?
  Date        DateTime @db.DateTime(0)
  employee_id Int
  Employer_id Int
  Employer    Employer @relation(fields: [Employer_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_messages_Employer1")
  employee    employee @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_messages_employee1")

  @@id([id, employee_id, Employer_id])
  @@index([Employer_id], map: "fk_messages_Employer1_idx")
  @@index([employee_id], map: "fk_messages_employee1_idx")
}

model problems {
  id          Int      @unique(map: "id_UNIQUE")
  text        String   @db.VarChar(45)
  img         Bytes
  Employer_id Int
  employee_id Int
  Employer    Employer @relation(fields: [Employer_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_problems_Employer1")
  employee    employee @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_problems_employee1")

  @@id([id, Employer_id, employee_id])
  @@index([Employer_id], map: "fk_problems_Employer1_idx")
  @@index([employee_id], map: "fk_problems_employee1_idx")
}

model reviews {
  id     Int     @id @unique(map: "id_UNIQUE") @default(autoincrement())
  text   String  @db.VarChar(200)
  img    Bytes?
  rating Decimal @db.Decimal(10, 0)
  Tasks  Tasks[]
}

model Application {
  id             Int      @id @default(autoincrement())
  task           Tasks    @relation(fields: [taskId], references: [id])
  taskId         Int
  employee       employee @relation(fields: [employeeId], references: [id])
  employeeId     Int
  coverLetter    String?
  similarProject String?
  expectedBudget Float?
  deadline       DateTime
  note           String?
  accepted       Boolean? @default(false)
}
